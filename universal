local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- GUI nút AL
local function createLadderGUI()
	if player.PlayerGui:FindFirstChild("LadderGui") then return end

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "LadderGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = player:WaitForChild("PlayerGui")

	local button = Instance.new("TextButton")
	button.Size = UDim2.new(0, 60, 0, 30)
	button.Position = UDim2.new(1, -70, 1, -40)
	button.AnchorPoint = Vector2.new(1,1)
	button.Text = "AL"
	button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
	button.TextColor3 = Color3.new(1,1,1)
	button.BorderSizePixel = 0
	button.Font = Enum.Font.SourceSansBold
	button.TextSize = 18
	button.Parent = screenGui

	button.MouseButton1Click:Connect(function()
		if not player.Backpack:FindFirstChild("Ladder") then
			local tool = Instance.new("Tool")
			tool.Name = "Ladder"
			tool.RequiresHandle = false
			tool.Parent = player.Backpack
		end
		button.Visible = false
	end)
end

createLadderGUI()

-- Tool chính
local tool = Instance.new("Tool")
tool.Name = "Ladder"
tool.RequiresHandle = false
tool.Parent = player.Backpack

local debounce = false
local ghostLadder = nil
local placedLadder = nil

local ladderHeight = 15
local rungSpacing = 1.5
local sideOffset = 1.5
local sideWidth = 1.2
local rungWidth = 0.8
local rungLength = sideOffset * 2 + sideWidth

-- Tạo mô hình thang
local function createLadderModel(isGhost)
	local model = Instance.new("Model")
	model.Name = isGhost and "GhostLadder" or "RealLadder"
	local basePos = Vector3.new(0, 0, 0)
	local primary = nil

	for _, x in ipairs({-sideOffset, sideOffset}) do
		local side = Instance.new("Part")
		side.Size = Vector3.new(sideWidth, ladderHeight, sideWidth)
		side.Anchored = isGhost
		side.CanCollide = not isGhost
		side.Transparency = isGhost and 0.6 or 0
		side.Material = Enum.Material.Wood
		side.BrickColor = BrickColor.new("Reddish brown")
		side.CFrame = CFrame.new(basePos + Vector3.new(x, ladderHeight / 2, 0))
		side.Name = "Side"
		side.Parent = model
		if not primary then primary = side end
	end

	for i = 0, math.floor(ladderHeight / rungSpacing) - 1 do
		local rung = Instance.new("Part")
		rung.Size = Vector3.new(rungLength, rungWidth + 0.2, rungWidth)
		rung.Anchored = isGhost
		rung.CanCollide = not isGhost
		rung.Transparency = isGhost and 0.6 or 0
		rung.Material = Enum.Material.Wood
		rung.BrickColor = BrickColor.new("Reddish brown")
		rung.CFrame = CFrame.new(basePos + Vector3.new(0, (rungSpacing * i) + 0.2, 0))
		rung.Name = "Rung"
		rung.Parent = model
	end

	if not isGhost then
		local base = Instance.new("Part")
		base.Size = Vector3.new(3.5, 0.4, 3.5)
		base.Anchored = false
		base.CanCollide = true
		base.Transparency = 1
		base.Name = "BaseSupport"
		base.CFrame = CFrame.new(basePos + Vector3.new(0, -0.2, 0))
		base.Parent = model
	end

	model.PrimaryPart = primary

	if not isGhost then
		for _, part in ipairs(model:GetChildren()) do
			if part:IsA("Part") and part ~= primary then
				local weld = Instance.new("WeldConstraint")
				weld.Part0 = primary
				weld.Part1 = part
				weld.Parent = part
			end
		end
	end

	return model
end

-- Raycast kiểm tra vật cản trước mặt
local function getSafePlacementCFrame()
	local root = character:FindFirstChild("HumanoidRootPart")
	if not root then return nil end

	local forward = root.CFrame.LookVector
	local startPos = root.Position
	local params = RaycastParams.new()
	params.FilterDescendantsInstances = {character, ghostLadder}
	params.FilterType = Enum.RaycastFilterType.Blacklist

	local rayResult = workspace:Raycast(startPos, forward * 6, params)

	if rayResult then
		local safeDist = (rayResult.Position - startPos).Magnitude - 1.5
		if safeDist < 1 then return nil end
		return CFrame.new(startPos) * CFrame.new(0, ladderHeight/2, -safeDist)
	else
		return root.CFrame * CFrame.new(0, ladderHeight/2, -5)
	end
end

-- Tool được cầm
tool.Equipped:Connect(function()
	if ghostLadder then ghostLadder:Destroy() end
	ghostLadder = createLadderModel(true)
	ghostLadder.Parent = workspace
end)

tool.Unequipped:Connect(function()
	if ghostLadder then
		ghostLadder:Destroy()
		ghostLadder = nil
	end
end)

-- Di chuyển preview thang
RunService.RenderStepped:Connect(function()
	if ghostLadder and character:FindFirstChild("HumanoidRootPart") then
		local cframe = getSafePlacementCFrame()
		if cframe then
			ghostLadder:SetPrimaryPartCFrame(cframe)
		end
	end
end)

-- Đặt / cất thang
tool.Activated:Connect(function()
	if debounce then return end
	debounce = true

	if placedLadder then
		placedLadder:Destroy()
		placedLadder = nil
	else
		local cframe = getSafePlacementCFrame()
		if cframe then
			placedLadder = createLadderModel(false)
			placedLadder.Parent = workspace
			placedLadder:SetPrimaryPartCFrame(cframe)
		end
	end

	task.wait(0.3)
	debounce = false
end)

-- Tự động lấy lại tool nếu rơi void
task.spawn(function()
	while true do
		task.wait(1)
		if (not tool.Parent or tool.Parent == workspace) and tool:IsDescendantOf(game) then
			local handle = tool:FindFirstChild("Handle")
			if not handle or (handle and handle.Position.Y < -100) then
				tool.Parent = player.Backpack
			end
		end
	end
end)

-- Khi chết, tạo lại GUI nếu mất
player.CharacterAdded:Connect(function()
	character = player.Character or player.CharacterAdded:Wait()
	task.wait(1)
	createLadderGUI()
end)
